"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _execa = _interopRequireDefault(require("execa"));

var path = _interopRequireWildcard(require("path"));

var fs = _interopRequireWildcard(require("fs"));

var _detectPort = _interopRequireDefault(require("detect-port"));

var _serviceLock = require("gatsby-core-utils/dist/service-lock");

const startGraphQLServer = async programPath => {
  let port = await (0, _serviceLock.getService)(programPath, `recipesgraphqlserver`);

  if (!port) {
    var _subprocess$stderr;

    port = await (0, _detectPort.default)(4000);
    await (0, _serviceLock.createServiceLock)(programPath, `recipesgraphqlserver`, port);
    const subprocess = (0, _execa.default)(`node`, [require.resolve(`./server.js`), port], {
      all: true,
      env: {
        // Chalk doesn't want to output color in a child process
        // as it (correctly) thinks it's not in a normal terminal environemnt.
        // Since we're just returning data, we'll override that.
        FORCE_COLOR: `true`
      }
    }); // eslint-disable-next-line no-unused-expressions

    (_subprocess$stderr = subprocess.stderr) === null || _subprocess$stderr === void 0 ? void 0 : _subprocess$stderr.on(`data`, data => {
      console.log(data.toString());
    });
    process.on(`exit`, () => {
      subprocess.kill(`SIGTERM`, {
        forceKillAfterTimeout: 2000
      });
    }); // Log server output to a file.

    if (process.env.DEBUG) {
      var _subprocess$stdout;

      const logFile = path.resolve(`./recipe-server.log`);
      fs.writeFileSync(logFile, `\n-----\n${new Date().toJSON()}\n`);
      const writeStream = fs.createWriteStream(logFile, {
        flags: `a`
      }); // eslint-disable-next-line no-unused-expressions

      (_subprocess$stdout = subprocess.stdout) === null || _subprocess$stdout === void 0 ? void 0 : _subprocess$stdout.pipe(writeStream);
    }
  }

  return {
    port
  };
};

var _default = startGraphQLServer;
exports.default = _default;